{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java", "func_name": "IndexedElementsBinder.bindIndexed", "original_string": "protected final void bindIndexed(ConfigurationPropertyName name, Bindable<?> target,\n\t\t\tAggregateElementBinder elementBinder, ResolvableType aggregateType,\n\t\t\tResolvableType elementType, IndexedCollectionSupplier result) {\n\t\tfor (ConfigurationPropertySource source : getContext().getSources()) {\n\t\t\tbindIndexed(source, name, target, elementBinder, result, aggregateType,\n\t\t\t\t\telementType);\n\t\t\tif (result.wasSupplied() && result.get() != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "protected final void bindIndexed(ConfigurationPropertyName name, Bindable<?> target,\n\t\t\tAggregateElementBinder elementBinder, ResolvableType aggregateType,\n\t\t\tResolvableType elementType, IndexedCollectionSupplier result) {\n\t\tfor (ConfigurationPropertySource source : getContext().getSources()) {\n\t\t\tbindIndexed(source, name, target, elementBinder, result, aggregateType,\n\t\t\t\t\telementType);\n\t\t\tif (result.wasSupplied() && result.get() != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["protected", "final", "void", "bindIndexed", "(", "ConfigurationPropertyName", "name", ",", "Bindable", "<", "?", ">", "target", ",", "AggregateElementBinder", "elementBinder", ",", "ResolvableType", "aggregateType", ",", "ResolvableType", "elementType", ",", "IndexedCollectionSupplier", "result", ")", "{", "for", "(", "ConfigurationPropertySource", "source", ":", "getContext", "(", ")", ".", "getSources", "(", ")", ")", "{", "bindIndexed", "(", "source", ",", "name", ",", "target", ",", "elementBinder", ",", "result", ",", "aggregateType", ",", "elementType", ")", ";", "if", "(", "result", ".", "wasSupplied", "(", ")", "&&", "result", ".", "get", "(", ")", "!=", "null", ")", "{", "return", ";", "}", "}", "}"], "docstring": "Bind indexed elements to the supplied collection.\n@param name the name of the property to bind\n@param target the target bindable\n@param elementBinder the binder to use for elements\n@param aggregateType the aggregate type, may be a collection or an array\n@param elementType the element type\n@param result the destination for results", "docstring_tokens": ["Bind", "indexed", "elements", "to", "the", "supplied", "collection", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/IndexedElementsBinder.java#L67-L77", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setServletRegistrationBeans", "original_string": "public void setServletRegistrationBeans(\n\t\t\tCollection<? extends ServletRegistrationBean<?>> servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tthis.servletRegistrationBeans = new LinkedHashSet<>(servletRegistrationBeans);\n\t}", "language": "java", "code": "public void setServletRegistrationBeans(\n\t\t\tCollection<? extends ServletRegistrationBean<?>> servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tthis.servletRegistrationBeans = new LinkedHashSet<>(servletRegistrationBeans);\n\t}", "code_tokens": ["public", "void", "setServletRegistrationBeans", "(", "Collection", "<", "?", "extends", "ServletRegistrationBean", "<", "?", ">", ">", "servletRegistrationBeans", ")", "{", "Assert", ".", "notNull", "(", "servletRegistrationBeans", ",", "\"ServletRegistrationBeans must not be null\"", ")", ";", "this", ".", "servletRegistrationBeans", "=", "new", "LinkedHashSet", "<>", "(", "servletRegistrationBeans", ")", ";", "}"], "docstring": "Set {@link ServletRegistrationBean}s that the filter will be registered against.\n@param servletRegistrationBeans the Servlet registration beans", "docstring_tokens": ["Set", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L75-L80", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.addServletRegistrationBeans", "original_string": "public void addServletRegistrationBeans(\n\t\t\tServletRegistrationBean<?>... servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tCollections.addAll(this.servletRegistrationBeans, servletRegistrationBeans);\n\t}", "language": "java", "code": "public void addServletRegistrationBeans(\n\t\t\tServletRegistrationBean<?>... servletRegistrationBeans) {\n\t\tAssert.notNull(servletRegistrationBeans,\n\t\t\t\t\"ServletRegistrationBeans must not be null\");\n\t\tCollections.addAll(this.servletRegistrationBeans, servletRegistrationBeans);\n\t}", "code_tokens": ["public", "void", "addServletRegistrationBeans", "(", "ServletRegistrationBean", "<", "?", ">", "...", "servletRegistrationBeans", ")", "{", "Assert", ".", "notNull", "(", "servletRegistrationBeans", ",", "\"ServletRegistrationBeans must not be null\"", ")", ";", "Collections", ".", "addAll", "(", "this", ".", "servletRegistrationBeans", ",", "servletRegistrationBeans", ")", ";", "}"], "docstring": "Add {@link ServletRegistrationBean}s for the filter.\n@param servletRegistrationBeans the servlet registration beans to add\n@see #setServletRegistrationBeans", "docstring_tokens": ["Add", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L98-L103", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setServletNames", "original_string": "public void setServletNames(Collection<String> servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames = new LinkedHashSet<>(servletNames);\n\t}", "language": "java", "code": "public void setServletNames(Collection<String> servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames = new LinkedHashSet<>(servletNames);\n\t}", "code_tokens": ["public", "void", "setServletNames", "(", "Collection", "<", "String", ">", "servletNames", ")", "{", "Assert", ".", "notNull", "(", "servletNames", ",", "\"ServletNames must not be null\"", ")", ";", "this", ".", "servletNames", "=", "new", "LinkedHashSet", "<>", "(", "servletNames", ")", ";", "}"], "docstring": "Set servlet names that the filter will be registered against. This will replace any\npreviously specified servlet names.\n@param servletNames the servlet names\n@see #setServletRegistrationBeans\n@see #setUrlPatterns", "docstring_tokens": ["Set", "servlet", "names", "that", "the", "filter", "will", "be", "registered", "against", ".", "This", "will", "replace", "any", "previously", "specified", "servlet", "names", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L112-L115", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.addServletNames", "original_string": "public void addServletNames(String... servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames.addAll(Arrays.asList(servletNames));\n\t}", "language": "java", "code": "public void addServletNames(String... servletNames) {\n\t\tAssert.notNull(servletNames, \"ServletNames must not be null\");\n\t\tthis.servletNames.addAll(Arrays.asList(servletNames));\n\t}", "code_tokens": ["public", "void", "addServletNames", "(", "String", "...", "servletNames", ")", "{", "Assert", ".", "notNull", "(", "servletNames", ",", "\"ServletNames must not be null\"", ")", ";", "this", ".", "servletNames", ".", "addAll", "(", "Arrays", ".", "asList", "(", "servletNames", ")", ")", ";", "}"], "docstring": "Add servlet names for the filter.\n@param servletNames the servlet names to add", "docstring_tokens": ["Add", "servlet", "names", "for", "the", "filter", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L130-L133", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setUrlPatterns", "original_string": "public void setUrlPatterns(Collection<String> urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tthis.urlPatterns = new LinkedHashSet<>(urlPatterns);\n\t}", "language": "java", "code": "public void setUrlPatterns(Collection<String> urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tthis.urlPatterns = new LinkedHashSet<>(urlPatterns);\n\t}", "code_tokens": ["public", "void", "setUrlPatterns", "(", "Collection", "<", "String", ">", "urlPatterns", ")", "{", "Assert", ".", "notNull", "(", "urlPatterns", ",", "\"UrlPatterns must not be null\"", ")", ";", "this", ".", "urlPatterns", "=", "new", "LinkedHashSet", "<>", "(", "urlPatterns", ")", ";", "}"], "docstring": "Set the URL patterns that the filter will be registered against. This will replace\nany previously specified URL patterns.\n@param urlPatterns the URL patterns\n@see #setServletRegistrationBeans\n@see #setServletNames", "docstring_tokens": ["Set", "the", "URL", "patterns", "that", "the", "filter", "will", "be", "registered", "against", ".", "This", "will", "replace", "any", "previously", "specified", "URL", "patterns", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L142-L145", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.addUrlPatterns", "original_string": "public void addUrlPatterns(String... urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tCollections.addAll(this.urlPatterns, urlPatterns);\n\t}", "language": "java", "code": "public void addUrlPatterns(String... urlPatterns) {\n\t\tAssert.notNull(urlPatterns, \"UrlPatterns must not be null\");\n\t\tCollections.addAll(this.urlPatterns, urlPatterns);\n\t}", "code_tokens": ["public", "void", "addUrlPatterns", "(", "String", "...", "urlPatterns", ")", "{", "Assert", ".", "notNull", "(", "urlPatterns", ",", "\"UrlPatterns must not be null\"", ")", ";", "Collections", ".", "addAll", "(", "this", ".", "urlPatterns", ",", "urlPatterns", ")", ";", "}"], "docstring": "Add URL patterns, as defined in the Servlet specification, that the filter will be\nregistered against.\n@param urlPatterns the URL patterns", "docstring_tokens": ["Add", "URL", "patterns", "as", "defined", "in", "the", "Servlet", "specification", "that", "the", "filter", "will", "be", "registered", "against", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L161-L164", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.setDispatcherTypes", "original_string": "public void setDispatcherTypes(DispatcherType first, DispatcherType... rest) {\n\t\tthis.dispatcherTypes = EnumSet.of(first, rest);\n\t}", "language": "java", "code": "public void setDispatcherTypes(DispatcherType first, DispatcherType... rest) {\n\t\tthis.dispatcherTypes = EnumSet.of(first, rest);\n\t}", "code_tokens": ["public", "void", "setDispatcherTypes", "(", "DispatcherType", "first", ",", "DispatcherType", "...", "rest", ")", "{", "this", ".", "dispatcherTypes", "=", "EnumSet", ".", "of", "(", "first", ",", "rest", ")", ";", "}"], "docstring": "Convenience method to {@link #setDispatcherTypes(EnumSet) set dispatcher types}\nusing the specified elements.\n@param first the first dispatcher type\n@param rest additional dispatcher types", "docstring_tokens": ["Convenience", "method", "to", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L172-L174", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java", "func_name": "AbstractFilterRegistrationBean.configure", "original_string": "@Override\n\tprotected void configure(FilterRegistration.Dynamic registration) {\n\t\tsuper.configure(registration);\n\t\tEnumSet<DispatcherType> dispatcherTypes = this.dispatcherTypes;\n\t\tif (dispatcherTypes == null) {\n\t\t\tdispatcherTypes = EnumSet.of(DispatcherType.REQUEST);\n\t\t}\n\t\tSet<String> servletNames = new LinkedHashSet<>();\n\t\tfor (ServletRegistrationBean<?> servletRegistrationBean : this.servletRegistrationBeans) {\n\t\t\tservletNames.add(servletRegistrationBean.getServletName());\n\t\t}\n\t\tservletNames.addAll(this.servletNames);\n\t\tif (servletNames.isEmpty() && this.urlPatterns.isEmpty()) {\n\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\tDEFAULT_URL_MAPPINGS);\n\t\t}\n\t\telse {\n\t\t\tif (!servletNames.isEmpty()) {\n\t\t\t\tregistration.addMappingForServletNames(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(servletNames));\n\t\t\t}\n\t\t\tif (!this.urlPatterns.isEmpty()) {\n\t\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(this.urlPatterns));\n\t\t\t}\n\t\t}\n\t}", "language": "java", "code": "@Override\n\tprotected void configure(FilterRegistration.Dynamic registration) {\n\t\tsuper.configure(registration);\n\t\tEnumSet<DispatcherType> dispatcherTypes = this.dispatcherTypes;\n\t\tif (dispatcherTypes == null) {\n\t\t\tdispatcherTypes = EnumSet.of(DispatcherType.REQUEST);\n\t\t}\n\t\tSet<String> servletNames = new LinkedHashSet<>();\n\t\tfor (ServletRegistrationBean<?> servletRegistrationBean : this.servletRegistrationBeans) {\n\t\t\tservletNames.add(servletRegistrationBean.getServletName());\n\t\t}\n\t\tservletNames.addAll(this.servletNames);\n\t\tif (servletNames.isEmpty() && this.urlPatterns.isEmpty()) {\n\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\tDEFAULT_URL_MAPPINGS);\n\t\t}\n\t\telse {\n\t\t\tif (!servletNames.isEmpty()) {\n\t\t\t\tregistration.addMappingForServletNames(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(servletNames));\n\t\t\t}\n\t\t\tif (!this.urlPatterns.isEmpty()) {\n\t\t\t\tregistration.addMappingForUrlPatterns(dispatcherTypes, this.matchAfter,\n\t\t\t\t\t\tStringUtils.toStringArray(this.urlPatterns));\n\t\t\t}\n\t\t}\n\t}", "code_tokens": ["@", "Override", "protected", "void", "configure", "(", "FilterRegistration", ".", "Dynamic", "registration", ")", "{", "super", ".", "configure", "(", "registration", ")", ";", "EnumSet", "<", "DispatcherType", ">", "dispatcherTypes", "=", "this", ".", "dispatcherTypes", ";", "if", "(", "dispatcherTypes", "==", "null", ")", "{", "dispatcherTypes", "=", "EnumSet", ".", "of", "(", "DispatcherType", ".", "REQUEST", ")", ";", "}", "Set", "<", "String", ">", "servletNames", "=", "new", "LinkedHashSet", "<>", "(", ")", ";", "for", "(", "ServletRegistrationBean", "<", "?", ">", "servletRegistrationBean", ":", "this", ".", "servletRegistrationBeans", ")", "{", "servletNames", ".", "add", "(", "servletRegistrationBean", ".", "getServletName", "(", ")", ")", ";", "}", "servletNames", ".", "addAll", "(", "this", ".", "servletNames", ")", ";", "if", "(", "servletNames", ".", "isEmpty", "(", ")", "&&", "this", ".", "urlPatterns", ".", "isEmpty", "(", ")", ")", "{", "registration", ".", "addMappingForUrlPatterns", "(", "dispatcherTypes", ",", "this", ".", "matchAfter", ",", "DEFAULT_URL_MAPPINGS", ")", ";", "}", "else", "{", "if", "(", "!", "servletNames", ".", "isEmpty", "(", ")", ")", "{", "registration", ".", "addMappingForServletNames", "(", "dispatcherTypes", ",", "this", ".", "matchAfter", ",", "StringUtils", ".", "toStringArray", "(", "servletNames", ")", ")", ";", "}", "if", "(", "!", "this", ".", "urlPatterns", ".", "isEmpty", "(", ")", ")", "{", "registration", ".", "addMappingForUrlPatterns", "(", "dispatcherTypes", ",", "this", ".", "matchAfter", ",", "StringUtils", ".", "toStringArray", "(", "this", ".", "urlPatterns", ")", ")", ";", "}", "}", "}"], "docstring": "Configure registration settings. Subclasses can override this method to perform\nadditional configuration if required.\n@param registration the registration", "docstring_tokens": ["Configure", "registration", "settings", ".", "Subclasses", "can", "override", "this", "method", "to", "perform", "additional", "configuration", "if", "required", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java#L223-L249", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.ifAnyMissingClasses", "original_string": "public DependencyCustomizer ifAnyMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}", "language": "java", "code": "public DependencyCustomizer ifAnyMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}", "code_tokens": ["public", "DependencyCustomizer", "ifAnyMissingClasses", "(", "String", "...", "classNames", ")", "{", "return", "new", "DependencyCustomizer", "(", "this", ")", "{", "@", "Override", "protected", "boolean", "canAdd", "(", ")", "{", "for", "(", "String", "className", ":", "classNames", ")", "{", "try", "{", "DependencyCustomizer", ".", "this", ".", "loader", ".", "loadClass", "(", "className", ")", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}", "}", ";", "}"], "docstring": "Create a nested {@link DependencyCustomizer} that only applies if any of the\nspecified class names are not on the class path.\n@param classNames the class names to test\n@return a nested {@link DependencyCustomizer}", "docstring_tokens": ["Create", "a", "nested", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L91-L106", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.ifAllMissingClasses", "original_string": "public DependencyCustomizer ifAllMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "language": "java", "code": "public DependencyCustomizer ifAllMissingClasses(String... classNames) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String className : classNames) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tDependencyCustomizer.this.loader.loadClass(className);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "code_tokens": ["public", "DependencyCustomizer", "ifAllMissingClasses", "(", "String", "...", "classNames", ")", "{", "return", "new", "DependencyCustomizer", "(", "this", ")", "{", "@", "Override", "protected", "boolean", "canAdd", "(", ")", "{", "for", "(", "String", "className", ":", "classNames", ")", "{", "try", "{", "DependencyCustomizer", ".", "this", ".", "loader", ".", "loadClass", "(", "className", ")", ";", "return", "false", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "// swallow exception and continue", "}", "}", "return", "DependencyCustomizer", ".", "this", ".", "canAdd", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Create a nested {@link DependencyCustomizer} that only applies if all of the\nspecified class names are not on the class path.\n@param classNames the class names to test\n@return a nested {@link DependencyCustomizer}", "docstring_tokens": ["Create", "a", "nested", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L114-L130", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.ifAllResourcesPresent", "original_string": "public DependencyCustomizer ifAllResourcesPresent(String... paths) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String path : paths) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (DependencyCustomizer.this.loader.getResource(path) == null) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "language": "java", "code": "public DependencyCustomizer ifAllResourcesPresent(String... paths) {\n\t\treturn new DependencyCustomizer(this) {\n\t\t\t@Override\n\t\t\tprotected boolean canAdd() {\n\t\t\t\tfor (String path : paths) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (DependencyCustomizer.this.loader.getResource(path) == null) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\t\t// swallow exception and continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn DependencyCustomizer.this.canAdd();\n\t\t\t}\n\t\t};\n\t}", "code_tokens": ["public", "DependencyCustomizer", "ifAllResourcesPresent", "(", "String", "...", "paths", ")", "{", "return", "new", "DependencyCustomizer", "(", "this", ")", "{", "@", "Override", "protected", "boolean", "canAdd", "(", ")", "{", "for", "(", "String", "path", ":", "paths", ")", "{", "try", "{", "if", "(", "DependencyCustomizer", ".", "this", ".", "loader", ".", "getResource", "(", "path", ")", "==", "null", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}", "catch", "(", "Exception", "ex", ")", "{", "// swallow exception and continue", "}", "}", "return", "DependencyCustomizer", ".", "this", ".", "canAdd", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Create a nested {@link DependencyCustomizer} that only applies if the specified\npaths are on the class path.\n@param paths the paths to test\n@return a nested {@link DependencyCustomizer}", "docstring_tokens": ["Create", "a", "nested", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L138-L156", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.add", "original_string": "public DependencyCustomizer add(String... modules) {\n\t\tfor (String module : modules) {\n\t\t\tadd(module, null, null, true);\n\t\t}\n\t\treturn this;\n\t}", "language": "java", "code": "public DependencyCustomizer add(String... modules) {\n\t\tfor (String module : modules) {\n\t\t\tadd(module, null, null, true);\n\t\t}\n\t\treturn this;\n\t}", "code_tokens": ["public", "DependencyCustomizer", "add", "(", "String", "...", "modules", ")", "{", "for", "(", "String", "module", ":", "modules", ")", "{", "add", "(", "module", ",", "null", ",", "null", ",", "true", ")", ";", "}", "return", "this", ";", "}"], "docstring": "Add dependencies and all of their dependencies. The group ID and version of the\ndependencies are resolved from the modules using the customizer's\n{@link ArtifactCoordinatesResolver}.\n@param modules the module IDs\n@return this {@link DependencyCustomizer} for continued use", "docstring_tokens": ["Add", "dependencies", "and", "all", "of", "their", "dependencies", ".", "The", "group", "ID", "and", "version", "of", "the", "dependencies", "are", "resolved", "from", "the", "modules", "using", "the", "customizer", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L191-L196", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.add", "original_string": "public DependencyCustomizer add(String module, boolean transitive) {\n\t\treturn add(module, null, null, transitive);\n\t}", "language": "java", "code": "public DependencyCustomizer add(String module, boolean transitive) {\n\t\treturn add(module, null, null, transitive);\n\t}", "code_tokens": ["public", "DependencyCustomizer", "add", "(", "String", "module", ",", "boolean", "transitive", ")", "{", "return", "add", "(", "module", ",", "null", ",", "null", ",", "transitive", ")", ";", "}"], "docstring": "Add a single dependency and, optionally, all of its dependencies. The group ID and\nversion of the dependency are resolved from the module using the customizer's\n{@link ArtifactCoordinatesResolver}.\n@param module the module ID\n@param transitive {@code true} if the transitive dependencies should also be added,\notherwise {@code false}\n@return this {@link DependencyCustomizer} for continued use", "docstring_tokens": ["Add", "a", "single", "dependency", "and", "optionally", "all", "of", "its", "dependencies", ".", "The", "group", "ID", "and", "version", "of", "the", "dependency", "are", "resolved", "from", "the", "module", "using", "the", "customizer", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L207-L209", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java", "func_name": "DependencyCustomizer.add", "original_string": "public DependencyCustomizer add(String module, String classifier, String type,\n\t\t\tboolean transitive) {\n\t\tif (canAdd()) {\n\t\t\tArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext\n\t\t\t\t\t.getArtifactCoordinatesResolver();\n\t\t\tthis.classNode.addAnnotation(\n\t\t\t\t\tcreateGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getArtifactId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getVersion(module), classifier,\n\t\t\t\t\t\t\ttype, transitive));\n\t\t}\n\t\treturn this;\n\t}", "language": "java", "code": "public DependencyCustomizer add(String module, String classifier, String type,\n\t\t\tboolean transitive) {\n\t\tif (canAdd()) {\n\t\t\tArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext\n\t\t\t\t\t.getArtifactCoordinatesResolver();\n\t\t\tthis.classNode.addAnnotation(\n\t\t\t\t\tcreateGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getArtifactId(module),\n\t\t\t\t\t\t\tartifactCoordinatesResolver.getVersion(module), classifier,\n\t\t\t\t\t\t\ttype, transitive));\n\t\t}\n\t\treturn this;\n\t}", "code_tokens": ["public", "DependencyCustomizer", "add", "(", "String", "module", ",", "String", "classifier", ",", "String", "type", ",", "boolean", "transitive", ")", "{", "if", "(", "canAdd", "(", ")", ")", "{", "ArtifactCoordinatesResolver", "artifactCoordinatesResolver", "=", "this", ".", "dependencyResolutionContext", ".", "getArtifactCoordinatesResolver", "(", ")", ";", "this", ".", "classNode", ".", "addAnnotation", "(", "createGrabAnnotation", "(", "artifactCoordinatesResolver", ".", "getGroupId", "(", "module", ")", ",", "artifactCoordinatesResolver", ".", "getArtifactId", "(", "module", ")", ",", "artifactCoordinatesResolver", ".", "getVersion", "(", "module", ")", ",", "classifier", ",", "type", ",", "transitive", ")", ")", ";", "}", "return", "this", ";", "}"], "docstring": "Add a single dependency with the specified classifier and type and, optionally, all\nof its dependencies. The group ID and version of the dependency are resolved from\nthe module by using the customizer's {@link ArtifactCoordinatesResolver}.\n@param module the module ID\n@param classifier the classifier, may be {@code null}\n@param type the type, may be {@code null}\n@param transitive {@code true} if the transitive dependencies should also be added,\notherwise {@code false}\n@return this {@link DependencyCustomizer} for continued use", "docstring_tokens": ["Add", "a", "single", "dependency", "with", "the", "specified", "classifier", "and", "type", "and", "optionally", "all", "of", "its", "dependencies", ".", "The", "group", "ID", "and", "version", "of", "the", "dependency", "are", "resolved", "from", "the", "module", "by", "using", "the", "customizer", "s", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java#L222-L234", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicatorRegistryFactory.java", "func_name": "ReactiveHealthIndicatorRegistryFactory.createReactiveHealthIndicatorRegistry", "original_string": "public ReactiveHealthIndicatorRegistry createReactiveHealthIndicatorRegistry(\n\t\t\tMap<String, ReactiveHealthIndicator> reactiveHealthIndicators,\n\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\tAssert.notNull(reactiveHealthIndicators,\n\t\t\t\t\"ReactiveHealthIndicators must not be null\");\n\t\treturn initialize(new DefaultReactiveHealthIndicatorRegistry(),\n\t\t\t\treactiveHealthIndicators, healthIndicators);\n\t}", "language": "java", "code": "public ReactiveHealthIndicatorRegistry createReactiveHealthIndicatorRegistry(\n\t\t\tMap<String, ReactiveHealthIndicator> reactiveHealthIndicators,\n\t\t\tMap<String, HealthIndicator> healthIndicators) {\n\t\tAssert.notNull(reactiveHealthIndicators,\n\t\t\t\t\"ReactiveHealthIndicators must not be null\");\n\t\treturn initialize(new DefaultReactiveHealthIndicatorRegistry(),\n\t\t\t\treactiveHealthIndicators, healthIndicators);\n\t}", "code_tokens": ["public", "ReactiveHealthIndicatorRegistry", "createReactiveHealthIndicatorRegistry", "(", "Map", "<", "String", ",", "ReactiveHealthIndicator", ">", "reactiveHealthIndicators", ",", "Map", "<", "String", ",", "HealthIndicator", ">", "healthIndicators", ")", "{", "Assert", ".", "notNull", "(", "reactiveHealthIndicators", ",", "\"ReactiveHealthIndicators must not be null\"", ")", ";", "return", "initialize", "(", "new", "DefaultReactiveHealthIndicatorRegistry", "(", ")", ",", "reactiveHealthIndicators", ",", "healthIndicators", ")", ";", "}"], "docstring": "Create a {@link ReactiveHealthIndicatorRegistry} based on the specified health\nindicators. Each {@link HealthIndicator} are wrapped to a\n{@link HealthIndicatorReactiveAdapter}. If two instances share the same name, the\nreactive variant takes precedence.\n@param reactiveHealthIndicators the {@link ReactiveHealthIndicator} instances\nmapped by name\n@param healthIndicators the {@link HealthIndicator} instances mapped by name if\nany.\n@return a {@link ReactiveHealthIndicator} that delegates to the specified\n{@code reactiveHealthIndicators}.", "docstring_tokens": ["Create", "a", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicatorRegistryFactory.java#L57-L64", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java", "func_name": "CentralDirectoryParser.parse", "original_string": "public RandomAccessData parse(RandomAccessData data, boolean skipPrefixBytes)\n\t\t\tthrows IOException {\n\t\tCentralDirectoryEndRecord endRecord = new CentralDirectoryEndRecord(data);\n\t\tif (skipPrefixBytes) {\n\t\t\tdata = getArchiveData(endRecord, data);\n\t\t}\n\t\tRandomAccessData centralDirectoryData = endRecord.getCentralDirectory(data);\n\t\tvisitStart(endRecord, centralDirectoryData);\n\t\tparseEntries(endRecord, centralDirectoryData);\n\t\tvisitEnd();\n\t\treturn data;\n\t}", "language": "java", "code": "public RandomAccessData parse(RandomAccessData data, boolean skipPrefixBytes)\n\t\t\tthrows IOException {\n\t\tCentralDirectoryEndRecord endRecord = new CentralDirectoryEndRecord(data);\n\t\tif (skipPrefixBytes) {\n\t\t\tdata = getArchiveData(endRecord, data);\n\t\t}\n\t\tRandomAccessData centralDirectoryData = endRecord.getCentralDirectory(data);\n\t\tvisitStart(endRecord, centralDirectoryData);\n\t\tparseEntries(endRecord, centralDirectoryData);\n\t\tvisitEnd();\n\t\treturn data;\n\t}", "code_tokens": ["public", "RandomAccessData", "parse", "(", "RandomAccessData", "data", ",", "boolean", "skipPrefixBytes", ")", "throws", "IOException", "{", "CentralDirectoryEndRecord", "endRecord", "=", "new", "CentralDirectoryEndRecord", "(", "data", ")", ";", "if", "(", "skipPrefixBytes", ")", "{", "data", "=", "getArchiveData", "(", "endRecord", ",", "data", ")", ";", "}", "RandomAccessData", "centralDirectoryData", "=", "endRecord", ".", "getCentralDirectory", "(", "data", ")", ";", "visitStart", "(", "endRecord", ",", "centralDirectoryData", ")", ";", "parseEntries", "(", "endRecord", ",", "centralDirectoryData", ")", ";", "visitEnd", "(", ")", ";", "return", "data", ";", "}"], "docstring": "Parse the source data, triggering {@link CentralDirectoryVisitor visitors}.\n@param data the source data\n@param skipPrefixBytes if prefix bytes should be skipped\n@return the actual archive data without any prefix bytes\n@throws IOException on error", "docstring_tokens": ["Parse", "the", "source", "data", "triggering", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/CentralDirectoryParser.java#L50-L61", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/properties/PropertiesConfigAdapter.java", "func_name": "PropertiesConfigAdapter.get", "original_string": "protected final <V> V get(Function<T, V> getter, Supplier<V> fallback) {\n\t\tV value = getter.apply(this.properties);\n\t\treturn (value != null) ? value : fallback.get();\n\t}", "language": "java", "code": "protected final <V> V get(Function<T, V> getter, Supplier<V> fallback) {\n\t\tV value = getter.apply(this.properties);\n\t\treturn (value != null) ? value : fallback.get();\n\t}", "code_tokens": ["protected", "final", "<", "V", ">", "V", "get", "(", "Function", "<", "T", ",", "V", ">", "getter", ",", "Supplier", "<", "V", ">", "fallback", ")", "{", "V", "value", "=", "getter", ".", "apply", "(", "this", ".", "properties", ")", ";", "return", "(", "value", "!=", "null", ")", "?", "value", ":", "fallback", ".", "get", "(", ")", ";", "}"], "docstring": "Get the value from the properties or use a fallback from the {@code defaults}.\n@param getter the getter for the properties\n@param fallback the fallback method, usually super interface method reference\n@param <V> the value type\n@return the property or fallback value", "docstring_tokens": ["Get", "the", "value", "from", "the", "properties", "or", "use", "a", "fallback", "from", "the", "{"], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/properties/PropertiesConfigAdapter.java#L52-L55", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java", "func_name": "ApplicationTemp.getDir", "original_string": "public File getDir(String subDir) {\n\t\tFile dir = new File(getDir(), subDir);\n\t\tdir.mkdirs();\n\t\treturn dir;\n\t}", "language": "java", "code": "public File getDir(String subDir) {\n\t\tFile dir = new File(getDir(), subDir);\n\t\tdir.mkdirs();\n\t\treturn dir;\n\t}", "code_tokens": ["public", "File", "getDir", "(", "String", "subDir", ")", "{", "File", "dir", "=", "new", "File", "(", "getDir", "(", ")", ",", "subDir", ")", ";", "dir", ".", "mkdirs", "(", ")", ";", "return", "dir", ";", "}"], "docstring": "Return a sub-directory of the application temp.\n@param subDir the sub-directory name\n@return a sub-directory", "docstring_tokens": ["Return", "a", "sub", "-", "directory", "of", "the", "application", "temp", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java#L66-L70", "partition": "train"}
{"repo": "spring-projects/spring-boot", "path": "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java", "func_name": "ApplicationTemp.getDir", "original_string": "public File getDir() {\n\t\tif (this.dir == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tbyte[] hash = generateHash(this.sourceClass);\n\t\t\t\tthis.dir = new File(getTempDirectory(), toHexString(hash));\n\t\t\t\tthis.dir.mkdirs();\n\t\t\t\tAssert.state(this.dir.exists(),\n\t\t\t\t\t\t() -> \"Unable to create temp directory \" + this.dir);\n\t\t\t}\n\t\t}\n\t\treturn this.dir;\n\t}", "language": "java", "code": "public File getDir() {\n\t\tif (this.dir == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tbyte[] hash = generateHash(this.sourceClass);\n\t\t\t\tthis.dir = new File(getTempDirectory(), toHexString(hash));\n\t\t\t\tthis.dir.mkdirs();\n\t\t\t\tAssert.state(this.dir.exists(),\n\t\t\t\t\t\t() -> \"Unable to create temp directory \" + this.dir);\n\t\t\t}\n\t\t}\n\t\treturn this.dir;\n\t}", "code_tokens": ["public", "File", "getDir", "(", ")", "{", "if", "(", "this", ".", "dir", "==", "null", ")", "{", "synchronized", "(", "this", ")", "{", "byte", "[", "]", "hash", "=", "generateHash", "(", "this", ".", "sourceClass", ")", ";", "this", ".", "dir", "=", "new", "File", "(", "getTempDirectory", "(", ")", ",", "toHexString", "(", "hash", ")", ")", ";", "this", ".", "dir", ".", "mkdirs", "(", ")", ";", "Assert", ".", "state", "(", "this", ".", "dir", ".", "exists", "(", ")", ",", "(", ")", "->", "\"Unable to create temp directory \"", "+", "this", ".", "dir", ")", ";", "}", "}", "return", "this", ".", "dir", ";", "}"], "docstring": "Return the directory to be used for application specific temp files.\n@return the application temp directory", "docstring_tokens": ["Return", "the", "directory", "to", "be", "used", "for", "application", "specific", "temp", "files", "."], "sha": "0b27f7c70e164b2b1a96477f1d9c1acba56790c1", "url": "https://github.com/spring-projects/spring-boot/blob/0b27f7c70e164b2b1a96477f1d9c1acba56790c1/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/system/ApplicationTemp.java#L76-L87", "partition": "train"}
